{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-symptoms.ts"],"sourcesContent":["// use server'\n'use server';\n/**\n * @fileOverview Analyzes user-provided symptoms and provides potential preventions, treatments, and consequences.\n *\n * - analyzeSymptoms - A function that handles the symptom analysis process.\n * - AnalyzeSymptomsInput - The input type for the analyzeSymptoms function.\n * - AnalyzeSymptomsOutput - The return type for the analyzeSymptoms function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AnalyzeSymptomsInputSchema = z.object({\n  symptoms: z.string().describe('The symptoms described by the user.'),\n});\nexport type AnalyzeSymptomsInput = z.infer<typeof AnalyzeSymptomsInputSchema>;\n\nconst AnalyzeSymptomsOutputSchema = z.object({\n  analysis: z.object({\n    potentialConditions: z.array(z.object({\n        name: z.string().describe(\"The name of the potential disease or condition.\"),\n        description: z.string().describe(\"A brief description of the condition and why it might be relevant based on the symptoms provided.\")\n    })).describe(\"A list of potential diseases or conditions based on the symptoms.\"),\n    prevention: z.string().describe('Possible preventions for the described symptoms.'),\n    treatments: z.string().describe('Potential treatments for the described symptoms.'),\n    consequences: z.string().describe('Possible consequences of the described symptoms.'),\n    articlesSummary: z.array(z.string()).describe('Summarized bullet points from relevant articles.'),\n  }).describe('Analysis of the symptoms provided'),\n});\nexport type AnalyzeSymptomsOutput = z.infer<typeof AnalyzeSymptomsOutputSchema>;\n\nexport async function analyzeSymptoms(input: AnalyzeSymptomsInput): Promise<AnalyzeSymptomsOutput> {\n  return analyzeSymptomsFlow(input);\n}\n\nconst analyzeSymptomsPrompt = ai.definePrompt({\n  name: 'analyzeSymptomsPrompt',\n  input: {schema: AnalyzeSymptomsInputSchema},\n  output: {schema: AnalyzeSymptomsOutputSchema},\n  prompt: `You are a medical assistant. Analyze the symptoms described by the user and provide the following information:\n1. A list of potential diseases or conditions that could match the symptoms. For each condition, provide its name and a short description.\n2. General advice on possible preventions for the symptoms.\n3. General advice on potential treatments for the symptoms.\n4. General advice on possible consequences if the symptoms are left untreated.\n5. A summary of relevant medical articles in brief, readable bullet points.\n\nALWAYS include a disclaimer that this is not a substitute for professional medical advice and the user should consult a healthcare professional for an accurate diagnosis. You can add this disclaimer within the generated text.\n\nSymptoms: {{{symptoms}}}`,\n});\n\nconst analyzeSymptomsFlow = ai.defineFlow(\n  {\n    name: 'analyzeSymptomsFlow',\n    inputSchema: AnalyzeSymptomsInputSchema,\n    outputSchema: AnalyzeSymptomsOutputSchema,\n  },\n  async input => {\n    const {output} = await analyzeSymptomsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;AAEd;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACjB,qBAAqB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YAClC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC1B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACrC,IAAI,QAAQ,CAAC;QACb,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAChC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAClC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IAChD,GAAG,QAAQ,CAAC;AACd;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC5C,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;;;wBASa,CAAC;AACzB;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,sBAAsB;IAC7C,OAAO;AACT;;;IA7BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-article-preview.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview This flow generates an article preview with a relevant image.\n *\n * - generateArticlePreview - A function that takes article content and generates a preview with an AI-generated image.\n * - GenerateArticlePreviewInput - The input type for the generateArticlePreview function.\n * - GenerateArticlePreviewOutput - The return type for the generateArticlePreview function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateArticlePreviewInputSchema = z.object({\n  articleContent: z\n    .string()\n    .describe('The content of the article to generate a preview for.'),\n});\nexport type GenerateArticlePreviewInput = z.infer<\n  typeof GenerateArticlePreviewInputSchema\n>;\n\nconst GenerateArticlePreviewOutputSchema = z.object({\n  previewText: z.string().describe('A short preview of the article content.'),\n  imageUrl: z\n    .string()\n    .describe(\n      'A data URI containing a base64-encoded image relevant to the article content. The data URI must include a MIME type and use Base64 encoding. Expected format: \\'data:<mimetype>;base64,<encoded_data>\\'.' \n    ),\n});\nexport type GenerateArticlePreviewOutput = z.infer<\n  typeof GenerateArticlePreviewOutputSchema\n>;\n\nexport async function generateArticlePreview(\n  input: GenerateArticlePreviewInput\n): Promise<GenerateArticlePreviewOutput> {\n  return generateArticlePreviewFlow(input);\n}\n\nconst previewPrompt = ai.definePrompt({\n  name: 'previewPrompt',\n  input: {schema: GenerateArticlePreviewInputSchema},\n  output: {schema: GenerateArticlePreviewOutputSchema},\n  prompt: `Given the following article content, generate a short preview text and an image that is relevant to the article.\\n\\nArticle Content: {{{articleContent}}}`,\n});\n\nconst generateArticlePreviewFlow = ai.defineFlow(\n  {\n    name: 'generateArticlePreviewFlow',\n    inputSchema: GenerateArticlePreviewInputSchema,\n    outputSchema: GenerateArticlePreviewOutputSchema,\n  },\n  async input => {\n    const {output} = await previewPrompt(input);\n    if (!output) {\n      throw new Error('No output from previewPrompt');\n    }\n    try {\n      const {media} = await ai.generate({\n        // IMPORTANT: ONLY the googleai/gemini-2.0-flash-preview-image-generation model is able to generate images. You MUST use exactly this model to generate images.\n        model: 'googleai/gemini-2.0-flash-preview-image-generation',\n\n        prompt: [\n          {text: `Generate an image that is relevant to this article: ${input.articleContent}`},\n        ],\n\n        config: {\n          responseModalities: ['TEXT', 'IMAGE'], // MUST provide both TEXT and IMAGE, IMAGE only won't work\n        },\n      });\n      return {\n        previewText: output.previewText,\n        imageUrl: media.url,\n      };\n    } catch (e: any) {\n      console.error('Image generation failed', e);\n      return {\n        previewText: output.previewText,\n        imageUrl: '',\n      };\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,gBAAgB,uIAAA,CAAA,IAAC,CACd,MAAM,GACN,QAAQ,CAAC;AACd;AAKA,MAAM,qCAAqC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CACP;AAEN;AAKO,eAAe,uBACpB,KAAkC;IAElC,OAAO,2BAA2B;AACpC;AAEA,MAAM,gBAAgB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACpC,MAAM;IACN,OAAO;QAAC,QAAQ;IAAiC;IACjD,QAAQ;QAAC,QAAQ;IAAkC;IACnD,QAAQ,CAAC,yJAAyJ,CAAC;AACrK;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,cAAc;IACrC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,IAAI;QACF,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;YAChC,+JAA+J;YAC/J,OAAO;YAEP,QAAQ;gBACN;oBAAC,MAAM,CAAC,oDAAoD,EAAE,MAAM,cAAc,EAAE;gBAAA;aACrF;YAED,QAAQ;gBACN,oBAAoB;oBAAC;oBAAQ;iBAAQ;YACvC;QACF;QACA,OAAO;YACL,aAAa,OAAO,WAAW;YAC/B,UAAU,MAAM,GAAG;QACrB;IACF,EAAE,OAAO,GAAQ;QACf,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO;YACL,aAAa,OAAO,WAAW;YAC/B,UAAU;QACZ;IACF;AACF;;;IAhDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { analyzeSymptoms, AnalyzeSymptomsOutput } from \"@/ai/flows/analyze-symptoms\";\nimport { generateArticlePreview, GenerateArticlePreviewOutput } from \"@/ai/flows/generate-article-preview\";\n\nexport async function getSymptomAnalysis(\n  symptoms: string\n): Promise<{ data?: AnalyzeSymptomsOutput; error?: string }> {\n  if (!symptoms) {\n    return { error: \"Symptoms cannot be empty.\" };\n  }\n  try {\n    const result = await analyzeSymptoms({ symptoms });\n    return { data: result };\n  } catch (e) {\n    console.error(e);\n    return { error: \"Failed to analyze symptoms. Please try again.\" };\n  }\n}\n\nexport async function getArticlePreview(\n  articleContent: string\n): Promise<{ data?: GenerateArticlePreviewOutput; error?: string }> {\n  if (!articleContent) {\n    return { error: \"Article content cannot be empty.\" };\n  }\n  try {\n    const result = await generateArticlePreview({ articleContent });\n    return { data: result };\n  } catch (e) {\n    console.error(e);\n    return { error: \"Failed to generate article preview. Please try again.\" };\n  }\n}\n"],"names":[],"mappings":";;;;;;AAEA;AACA;;;;;;AAEO,eAAe,mBACpB,QAAgB;IAEhB,IAAI,CAAC,UAAU;QACb,OAAO;YAAE,OAAO;QAA4B;IAC9C;IACA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,yIAAA,CAAA,kBAAe,AAAD,EAAE;YAAE;QAAS;QAChD,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,OAAO;QAAgD;IAClE;AACF;AAEO,eAAe,kBACpB,cAAsB;IAEtB,IAAI,CAAC,gBAAgB;QACnB,OAAO;YAAE,OAAO;QAAmC;IACrD;IACA,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,oJAAA,CAAA,yBAAsB,AAAD,EAAE;YAAE;QAAe;QAC7D,OAAO;YAAE,MAAM;QAAO;IACxB,EAAE,OAAO,GAAG;QACV,QAAQ,KAAK,CAAC;QACd,OAAO;YAAE,OAAO;QAAwD;IAC1E;AACF;;;IA5BsB;IAeA;;AAfA,+OAAA;AAeA,+OAAA","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getSymptomAnalysis as '40aff77d8ebe4981a8a095bd14c3444f46f41eef98'} from 'ACTIONS_MODULE0'\nexport {getArticlePreview as '40e98e094f5797a0fa231f15d77a78ad23151d2ed2'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/symptom-analyzer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/symptom-analyzer.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/symptom-analyzer.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 526, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/symptom-analyzer.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/symptom-analyzer.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/symptom-analyzer.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 540, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import SymptomAnalyzer from \"@/components/symptom-analyzer\";\nimport { Stethoscope } from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <header className=\"sticky top-0 z-50 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container flex h-14 max-w-screen-2xl items-center px-6\">\n           <div className=\"flex items-center space-x-2\">\n            <Stethoscope className=\"h-6 w-6 text-primary\" />\n            <span className=\"font-bold inline-block text-lg\">MediAdvice</span>\n          </div>\n        </div>\n      </header>\n      <main className=\"flex-grow flex flex-col items-center p-4 sm:p-8 md:p-12 lg:p-24\">\n        <div className=\"w-full max-w-3xl\">\n          <div className=\"flex flex-col items-center text-center mb-12\">\n            <h1 className=\"text-5xl md:text-6xl font-bold text-foreground tracking-tight text-glow\">\n              Your Personal Health Companion\n            </h1>\n            <p className=\"mt-6 text-xl text-muted-foreground max-w-3xl\">\n              Describe your symptoms below, and our AI assistant will provide an analysis, including potential prevention methods, treatments, and consequences.\n            </p>\n             <p className=\"mt-2 text-sm text-muted-foreground max-w-2xl italic\">\n              This is not a substitute for professional medical advice.\n            </p>\n          </div>\n          <SymptomAnalyzer />\n        </div>\n      </main>\n      <footer className=\"w-full text-center p-6 bg-secondary/50\">\n        <p className=\"text-sm text-muted-foreground\">\n          &copy; {new Date().getFullYear()} MediAdvice. Created by @Ayushi Varshney.\n        </p>\n      </footer>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAO,WAAU;0BAChB,cAAA,8OAAC;oBAAI,WAAU;8BACZ,cAAA,8OAAC;wBAAI,WAAU;;0CACd,8OAAC,gNAAA,CAAA,cAAW;gCAAC,WAAU;;;;;;0CACvB,8OAAC;gCAAK,WAAU;0CAAiC;;;;;;;;;;;;;;;;;;;;;;0BAIvD,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAG,WAAU;8CAA0E;;;;;;8CAGxF,8OAAC;oCAAE,WAAU;8CAA+C;;;;;;8CAG3D,8OAAC;oCAAE,WAAU;8CAAsD;;;;;;;;;;;;sCAItE,8OAAC,yIAAA,CAAA,UAAe;;;;;;;;;;;;;;;;0BAGpB,8OAAC;gBAAO,WAAU;0BAChB,cAAA,8OAAC;oBAAE,WAAU;;wBAAgC;wBACnC,IAAI,OAAO,WAAW;wBAAG;;;;;;;;;;;;;;;;;;AAK3C","debugId":null}}]
}